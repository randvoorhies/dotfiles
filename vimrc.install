set nocompatible
syntax on
filetype on
let mapleader=","

if has("user_commands")
  set rtp+=~/.vim/bundle/vundle/
  runtime autoload/vundle.vim
endif

if exists("*vundle#rc")
  " $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  filetype off " required!

  call vundle#rc()

  " required for vundle
  Bundle 'pathogen.vim'

  " vundle
  Bundle 'gmarik/vundle'

  " Explore the filesystem in a tree
  Bundle 'scrooloose/nerdtree'
  nnoremap <leader>n :NERDTreeToggle<CR>

  " Browse tags
  Bundle 'Tagbar'
  nnoremap tt :TagbarToggle<CR>

  " Complete everything with tabs
  Bundle 'SuperTab'

  " Better completion
  Bundle 'neocomplcache'
  let g:neocomplcache_enable_at_startup = 1
  set completeopt-=preview

  " Color scheme
  Bundle 'w0ng/vim-hybrid'
  Bundle 'Wombat'
  Bundle 'chriskempson/vim-tomorrow-theme'
  Bundle 'molokai'

  " Semantic highlighting
  Bundle 'jaxbot/semantic-highlight.vim'

  " Align text
  Bundle 'godlygeek/tabular'
  imap <leader>= :Tab /=<CR>
  nmap <leader>= :Tab /=<CR>
  vmap <leader>= :Tab /=<CR>
  imap <leader>: :Tab /:<CR>
  nmap <leader>: :Tab /:<CR>
  vmap <leader>: :Tab /:<CR>

  " Show marks
  Bundle 'ShowMarks7'
  let g:showmarks_include="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

  " Airline
  Bundle 'bling/vim-airline'
  let g:airline#extensions#tabline#enabled=1
  set laststatus=2

  " Easy motion
  Bundle 'EasyMotion'

  " tmuxline
  Bundle 'edkolev/tmuxline.vim'

  filetype plugin indent on
endif

set encoding=utf-8
set autochdir                  " set cwd to the current file's dir
set ruler                      " show line, col, line% in bottom right corner
set autoindent
set smartindent
set expandtab                  " spaces instead of tabs
set tabstop=2                  " cols per tab
set shiftwidth=2               " cols per shift (>> and <<)
set showmatch                  " briefly show the matching bracket when you type it (won't scroll)
set guioptions-=T              " no toolbar
set guioptions-=M              " no menu bar
set guioptions-=l              " no left scrollbar
set guioptions-=L              
set guioptions-=R              " no right scrollbar
set guioptions-=r              
set showmode                   " tell me when I'm in insert mode
set ttyfast                    " we're on a fast connection, it's ok to send lots of bytes
set autoread                   " detect when open files have changed and reopen them
set title                      " set the title bar
set formatoptions=qn1          " see :help fo-table for options here
set number                     " line numbers
set diffopt+=iwhite            " ignore whitespace in diffs
set nobackup                   " backup off, since most stuff is in SVN, git et.c anyway...
set nowritebackup
set noswapfile
set backspace=indent,eol,start " backspace before insertion point
set switchbuf=usetab,newtab    " switch to an existing tab if a buffer is open, or create a new one if not
set hidden                     " don't unload buffer when it is abandoned
set hlsearch                   " highlight all search matches
set incsearch                  " indicate next search match as the pattern is being entered
set ignorecase                 " ignore case when searching
set smartcase                  " do not ignore case when the search pattern contains upper case
set magic

let g:hybrid_use_iTerm_colors=1
let g:airline_powerline_fonts=1

colorscheme Tomorrow-Night-Bright

" <Ctrl-l> redraws the screen and removes search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Disable F1.
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Look for tag files recursively up to the root directory.
set tags=./tags,tags;/

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>=" 

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
set grepformat=%f:%l:%m

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" #################### Key Mappings #################### 

" toggle linewrap
nnoremap <leader>w :set wrap!<cr>

" Edit Vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Source Vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" Beginning of line
nnoremap H 0

" End of line
nnoremap L $

" j and k jump wrapped lines
nmap j gj
nmap k gk

" Remap Esc to JK...
" Always use jk to return to normal mode
inoremap jk <esc>
inoremap kj <esc>

" Ctrl-\ jumps to tag definition in new tab
map <C-\> :tab split<cr>:exec("tag ".expand("<cword>"))<CR>

" #################### Filetype Settings ####################  
" arduino files
au BufRead, BufNewFile *.ino set filetype=arduino

" markdown
au BufRead,BufNewFile *.md set filetype=markdown

" my notes files
au BufRead,BufNewFile *.note set filetype=notes

" Makefile file settings -------------------- 
augroup filetype_make
  autocmd!
  " Don't expand tabs when editing makefiles
  autocmd! FileType make setlocal noexpandtab
augroup END

" Vimscript file settings -------------------- 
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim set foldlevelstart=0
augroup END
" 
" Text file settings -------------------- 
augroup filetype_txt
  autocmd BufNewFile,BufRead *.txt setlocal ft=none
  autocmd BufNewFile,BufRead *.txt setlocal spell
  autocmd BufNewFile,BufRead *.txt setlocal foldmethod=marker
augroup END

" #################### Miscellaneous Functions ####################  
" Allow tab completion of tags.
inoremap <Tab> <c-r>=InsertTabWrapper("forward")<cr>
inoremap <S-Tab> <c-r>=InsertTabWrapper("backward")<cr>
function! InsertTabWrapper(direction)
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    elseif a:direction == "backward"
        return "\<c-p>"
    else
        return "\<c-n>"
    endif
endfunction
