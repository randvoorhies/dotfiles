set nocompatible

" Load extra config files
function! LoadConfigFile(configfile)
  let filepath = $HOME . "/dotfiles/vimconfig/" . a:configfile
  if filereadable(filepath)
    execute 'source '.fnameescape(filepath)
  endif
endfunction
call LoadConfigFile("plugins.vim")

syntax on
filetype on
set t_Co=256                  " Let vim know we're using a 256 color terminal
set tabpagemax=100            " Open up to 100 tabs
set encoding=utf-8            " UTF-8 Encoding
set autochdir                 " Automatically switch to the directory of an open file
set ruler                     " Turn on the ruler in the bottom-right
set autoindent                " Copy indent from current line when starting new one
set shiftwidth=2              " Number of spaces for each level of indentation
set tabstop=2                 " Number of spaces that a <Tab> in the file counts for
set expandtab                 " Turn spaces into tabs
set showmatch                 " When a bracket is inserted, briefly jump to the matching one.
set hlsearch                  " Highlight searches
set guioptions-=T             " Remove the toolbar from the GUI
set showmode                  " Tell me when I'm in insert mode
set ttyfast                   " We're on a fast connection, it's ok to send lots of bytes
set showbreak=↪               " String to put at the start of lines that have been wrapped.
set fillchars=diff:⣿          " Characters to fill the statuslines and vertical separators.
set autoread                  " Detect when open files have changed and reopen them
set title                     " Set the title of the window to the filename
set formatoptions=qn1         " See :help fo-table for options here
set foldmethod=indent         " Lines with equal indent form a fold.
set foldnestmax=10            " Sets the maximum nesting of folds for the "indent" and "syntax".
set nofoldenable              " When off, all folds are open.
set foldlevel=10              " Sets the fold level: Folds with a higher level will be closed.
set number                    " Precede each line with its line number
set diffopt+=iwhite           " Option settings for diff mode.
set nobackup                  " Backup off, since most stuff is in SVN, git et.c anyway...
set nowritebackup             " Backup off when writing
set modeline                  " Look for modelines at the beginning and end of files
set showmatch                 " Show matching brackets
set noswapfile                " Don't create swapfiles
set lazyredraw                " Redraw only when we need to.

" Make sure you have to hit jk within a short window (100ms) to trigger normal mode
set timeout timeoutlen=1000 ttimeoutlen=100

" Setup the wildmenu
set wildmenu
set wildmode=list:longest
set wildignore+=*.git,*.svn
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.jpeg,*.bmp,*.gif,*.png,*.pdf
set wildignore+=*.o
set wildignore+=*.DS_Store
set wildignore+=*.pyc

" Try to load our favorite colorscheme. Fall back if necessary
try 
  colorscheme badwolf
catch
  silent! colorscheme solarized
endtry

"Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>=" 

" Comma is a more ergonomic mapleader than forwardslash
let mapleader=","

" Edit Vimrc
nnoremap <leader>ev :vsplit $HOME/.vimrc<cr>

" Source Vimrc
nnoremap <leader>sv :source $HOME/.vimrc<cr>

" Always use jk to return to normal mode
inoremap jk <esc>

" turn off search highlight with ,<space>
nnoremap <leader><space> :nohlsearch<CR>

" Filetype settings
augroup filetypes
  autocmd!

  autocmd BufNewFile,BufRead *.pde setlocal ft=arduino

  autocmd BufNewFile,BufRead *.xacro setlocal ft=xml

  autocmd BufNewFile,BufRead *.launch setlocal ft=xml

  autocmd FileType make setlocal noexpandtab

  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim set foldlevelstart=0

  autocmd BufNewFile,BufRead *.txt setlocal ft=none
  autocmd BufNewFile,BufRead *.txt setlocal spell
  autocmd BufNewFile,BufRead *.txt setlocal foldmethod=marker

  autocmd BufNewFile,BufRead CMakeLists.txt setlocal ft=cmake
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal nospell
  autocmd BufNewFile,BufRead CMakeLists.txt NeoComplCacheEnable

  autocmd BufNewFile,BufRead *.md setlocal ft=mmd
  autocmd BufNewFile,BufRead *.md nnoremap <leader>ll :!multimarkdown % > /tmp/%.html<cr>
  autocmd BufNewFile,BufRead *.md nnoremap <leader>lv :!google-chrome /tmp/%.html<cr>

  autocmd BufNewFile,BufRead *.ino setlocal ft=Arduino
augroup END

" Convenient "OpenOther function for NRT
if has('python')
function! OpenOther()
  if expand("%:e") == "C"
    exe "tabe" fnameescape(expand("%:p:r:s?src?include?").".H")
  elseif expand("%:e") == "H"
    exe "tabe" fnameescape(expand("%:p:r:s?include?src?").".C")
  endif
endfunction
nmap ,o :call OpenOther()<CR>
endif

" vim:syntax=vim
