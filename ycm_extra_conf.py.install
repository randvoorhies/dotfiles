import os
import fnmatch

# These are the compilation flags that will be used in case there's no
# compilation database set (by default, one is not set).
# CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.
flags = [
'-Wall',
'-Wextra',
'-Werror',
#'-Wno-long-long',
#'-Wno-variadic-macros',
#'-fexceptions',
#'-DNDEBUG',
'-std=c++11',
'-x', 'c++',
'-isystem', '/usr/include/c++/4.6',
'-isystem', '/usr/include/c++/4.6/x86_64-linux-gnu',
'-isystem', '/usr/include/c++/4.6/backward',
'-isystem', '/usr/local/include',
'-isystem', '/usr/include/x86_64-linux-gnu',
'-isystem', '/usr/include',
'-isystem', '/usr/include/clang/3.0/include/',
'-isystem', '/usr/lib/gcc/x86_64-linux-gnu/4.6/include/',
'-isystem', '/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/',
'-isystem', '/home/rand/workspace/ilab/nrt/trunk/nrt/include',
'-isystem', '/opt/ros/indigo/include',
]




def FlagsForFile( filename, **kwargs ):
  global flags

  log = open('/tmp/ycmlog.txt', 'w')
  log.write('Creating flags for ' + filename + '\n')
  log.flush()

  # Try to find a CMakeLists.txt file
  cmakelistsdir = os.path.dirname(filename)
  while cmakelistsdir != '/':
      if os.path.exists(os.path.join(cmakelistsdir, 'CMakeLists.txt')):
          if os.path.exists(os.path.join(cmakelistsdir, 'build')):
              break

      cmakelistsdir = os.path.dirname(cmakelistsdir)

  log.write('cmakelistsdir = ' + cmakelistsdir + '\n')
  log.flush()

  # If there was a CMakeLists.txt file, then try to find a build directory
  foundcmakelists = False
  builddir = os.path.join(cmakelistsdir, 'build')
  if cmakelistsdir != '/' and os.path.exists(builddir):
      # If we found a build directory, then look for any 'flags.make' files
      flagsfiles = []
      for root, dirnames, filenames in os.walk(builddir):
          for filename in fnmatch.filter(filenames, 'flags.make'):
              flagsfiles.append(os.path.join(root, filename))

      # Grab any CXX_FLAGS from our flags.make files, and add them onto our global flags
      foundcmakelists = True
      cmakeflags = []
      for flagsfile in flagsfiles:
          with open(flagsfile, 'r') as ff:
              for line in ff:
                  if line.startswith('CXX_FLAGS'):
                      for flag in line.split(' '):
                          if flag.startswith('-I'):
                              cmakeflags.append(flag)

      log.write('Appending some flags\n')
      flags += list(set(cmakeflags))

  if not foundcmakelists:
      log.write('No CMakeLists.txt found... using CPPFLAGS')
      flags += os.environ['CPPFLAGS']


  log.write("\n:::::::::::::::: Final Flags :::::::::::::::::\n")
  log.write(str(flags))
  log.write("\n")

  log.close()

  return {
     'flags'    : flags,
     'do_cache' : True
   }
